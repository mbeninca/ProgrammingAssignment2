# onde: m3=x1*mu1+x2*mu2 e s3=sqrt(x1^2*s1^2+x2^2*s2^2)
# x1 = fração mássica de LFO na mistura.
# x2 = fração mássica de HFO na mistura.
x1=0.3
x2=1-x1
md20BTE <- md20LFO*x1+md20HFO*x2
sd20BTE <- sqrt(sd20LFO^2*x1^2+sd20HFO^2*x2^2)
probd20BTE <- function(x){dnorm(x,mean=md20BTE,sd=sd20BTE)}
curve(probd20BTE,add=TRUE)
text(c(1,1.07,1.15),c(60,40,30),c("LFO","OBTE","HFO"))
# Quartis das distribuições de densidade:
qnorm(c(0.025,0.975),mean=md20LFO,sd=sd20LFO)
qnorm(c(0.025,0.975),mean=md20HFO,sd=sd20HFO)
qnorm(c(0.025,0.975),mean=md20BTE,sd=sd20BTE)
# Calculando a probabilidade (=proporção do tempo) de que a densidade
# do OBTE fique abaixo de 1,07:
offspec <- pnorm(1.07,mean=md20BTE,sd=sd20BTE)
offspec
x1=0.25
x2=1-x1
md20BTE <- md20LFO*x1+md20HFO*x2
sd20BTE <- sqrt(sd20LFO^2*x1^2+sd20HFO^2*x2^2)
probd20BTE <- function(x){dnorm(x,mean=md20BTE,sd=sd20BTE)}
curve(probd20BTE,add=TRUE)
text(c(1,1.07,1.15),c(60,40,30),c("LFO","OBTE","HFO"))
# Quartis das distribuições de densidade:
qnorm(c(0.025,0.975),mean=md20LFO,sd=sd20LFO)
qnorm(c(0.025,0.975),mean=md20HFO,sd=sd20HFO)
qnorm(c(0.025,0.975),mean=md20BTE,sd=sd20BTE)
# Calculando a probabilidade (=proporção do tempo) de que a densidade
# do OBTE fique abaixo de 1,07:
offspec <- pnorm(1.07,mean=md20BTE,sd=sd20BTE)
offspec
source('~/ENFileVault/R10009/AnaliseOBTEPlanta2.R', echo=TRUE)
curve(probv98LFO,xlim=c(1,250),log=10)
View(AnalisesOle2)
curve(probv98LFO,xlim=c(10,250),log=10)
curve(probv98LFO,xlim=c(0,250))#,log=10)
curve(probv98HFO,add=TRUE)
VBI_LFO
VBI_HFO
VBI_BTE
hist(VBI_HFO)
# Analises de LFO, HFO e OBTE
# Carregando os dados do laboratório:
AnalisesOle2 <- read.csv("~/ENFileVault/R10009/AnalisesOle2v2.csv", sep=";", dec=",")
# Calculando os parâmetros do HFO:
# --- Densidades:
AnalisesOle2$d15HFO <- with(AnalisesOle2,
(d15BTE-xLFO*d15LFO)/(1-xLFO))
AnalisesOle2$d20HFO <- with(AnalisesOle2,
(d20BTE-xLFO*d20LFO)/(1-xLFO))
# --- Viscosidades:
#(Ref.: http://profmaster.blogspot.com.br/2007/12/
#            how-to-calculate-viscosity-of-liquid.html)
VBI_LFO <- with(AnalisesOle2,
14.534*log(log(v40LFO+0.8))+10.975)
VBI_BTE <- with(AnalisesOle2,
14.534*log(log(v40BTE+0.8))+10.975)
VBI_HFO <- (VBI_BTE-AnalisesOle2$xLFO*VBI_LFO)/(1-AnalisesOle2$xLFO)
AnalisesOle2$v40HFO <- with(AnalisesOle2,
exp(exp((VBI_HFO-10.975)/14.535))-0.8)
VBI_LFO <- with(AnalisesOle2,
14.534*log(log(v98LFO+0.8))+10.975)
VBI_BTE <- with(AnalisesOle2,
14.534*log(log(v98BTE+0.8))+10.975)
VBI_HFO <- (VBI_BTE-AnalisesOle2$xLFO*VBI_LFO)/(1-AnalisesOle2$xLFO)
AnalisesOle2$v98HFO <- with(AnalisesOle2,
exp(exp((VBI_HFO-10.975)/14.535))-0.8)
# Prevendo o comportamento do OBTE
# DENSIDADE: Considerando d20 ~ N(m,s): ------------------------------------
md20LFO <- mean(AnalisesOle2$d20LFO)
sd20LFO <- sd(AnalisesOle2$d20LFO)
md20HFO <- mean(AnalisesOle2$d20HFO)
sd20HFO <- sd(AnalisesOle2$d20HFO)
probd20LFO <- function(x){dnorm(x,mean=md20LFO,sd=sd20LFO)}
probd20HFO <- function(x){dnorm(x,mean=md20HFO,sd=sd20HFO)}
curve(probd20LFO,
xlim=c(0.9,1.2),
main="Distribuição das densidades de LFO, HFO e OBTE\n(%LFO = 25%)",
xlab="densidade (20/4)",
ylab="",
yaxt="n")
curve(probd20HFO,add=TRUE)
# OBTE é uma mistura do LFO e HFO. Portanto,
# dOBTE ~ N(m3,s3)
# onde: m3=x1*mu1+x2*mu2 e s3=sqrt(x1^2*s1^2+x2^2*s2^2)
# x1 = fração mássica de LFO na mistura.
# x2 = fração mássica de HFO na mistura.
x1=0.25
x2=1-x1
md20BTE <- md20LFO*x1+md20HFO*x2
sd20BTE <- sqrt(sd20LFO^2*x1^2+sd20HFO^2*x2^2)
probd20BTE <- function(x){dnorm(x,mean=md20BTE,sd=sd20BTE)}
curve(probd20BTE,add=TRUE)
text(c(1,1.07,1.15),c(60,40,30),c("LFO","OBTE","HFO"))
# Quartis das distribuições de densidade:
qnorm(c(0.025,0.975),mean=md20LFO,sd=sd20LFO)
qnorm(c(0.025,0.975),mean=md20HFO,sd=sd20HFO)
qnorm(c(0.025,0.975),mean=md20BTE,sd=sd20BTE)
# Calculando a probabilidade (=proporção do tempo) de que a densidade
# do OBTE fique abaixo de 1,07:
offspec <- pnorm(1.07,mean=md20BTE,sd=sd20BTE)
offspec
x1=0.3
x2=1-x1
md20BTE <- md20LFO*x1+md20HFO*x2
sd20BTE <- sqrt(sd20LFO^2*x1^2+sd20HFO^2*x2^2)
probd20BTE <- function(x){dnorm(x,mean=md20BTE,sd=sd20BTE)}
curve(probd20BTE,add=TRUE)
text(c(1,1.07,1.15),c(60,40,30),c("LFO","OBTE","HFO"))
# Quartis das distribuições de densidade:
qnorm(c(0.025,0.975),mean=md20LFO,sd=sd20LFO)
qnorm(c(0.025,0.975),mean=md20HFO,sd=sd20HFO)
qnorm(c(0.025,0.975),mean=md20BTE,sd=sd20BTE)
# Calculando a probabilidade (=proporção do tempo) de que a densidade
# do OBTE fique abaixo de 1,07:
offspec <- pnorm(1.07,mean=md20BTE,sd=sd20BTE)
offspec
curve(probd20LFO,
xlim=c(0.9,1.2),
main="Distribuição das densidades de LFO, HFO e OBTE\n(%LFO = 25%)",
xlab="densidade (20/4)",
ylab="",
yaxt="n")
curve(probd20HFO,add=TRUE)
# OBTE é uma mistura do LFO e HFO. Portanto,
# dOBTE ~ N(m3,s3)
# onde: m3=x1*mu1+x2*mu2 e s3=sqrt(x1^2*s1^2+x2^2*s2^2)
# x1 = fração mássica de LFO na mistura.
# x2 = fração mássica de HFO na mistura.
x1=0.25
x2=1-x1
md20BTE <- md20LFO*x1+md20HFO*x2
sd20BTE <- sqrt(sd20LFO^2*x1^2+sd20HFO^2*x2^2)
probd20BTE <- function(x){dnorm(x,mean=md20BTE,sd=sd20BTE)}
curve(probd20BTE,add=TRUE)
text(c(1,1.07,1.15),c(60,40,30),c("LFO","OBTE","HFO"))
# Quartis das distribuições de densidade:
qnorm(c(0.025,0.975),mean=md20LFO,sd=sd20LFO)
qnorm(c(0.025,0.975),mean=md20HFO,sd=sd20HFO)
qnorm(c(0.025,0.975),mean=md20BTE,sd=sd20BTE)
# Calculando a probabilidade (=proporção do tempo) de que a densidade
# do OBTE fique abaixo de 1,07:
offspec <- pnorm(1.07,mean=md20BTE,sd=sd20BTE)
Sys.getenv("PATH")
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:\\Users\\marceb02\\Documents\\MikTeX\\miktex\\bin", sep=.Platform$path.sep))
devtools::install_github("rstudio/rticles")
install.packages("devtools")
devtools::install_github("rstudio/rticles")
help(pdf_document)
??pdf_document
FV022curve <- data.frame(cv=c(2110,1583,844,380),op=c(90/90,70/90,50/90,30/90))
g <- ggplot(FV022curve,aes(x=op,y=cv))+geom_point()
plot(g)
library("ggplot2", lib.loc="C:/Users/marceb02/Documents/R/win-library/3.0")
g <- ggplot(FV022curve,aes(x=op,y=cv))+geom_point()
plot(g)
op=c(90/90,80/90,70/90,60/90,50/90,40/90,30/90,10/90))
FV022curve <- data.frame(cv=c(2070,1416,805,459,284,172,98,44,6),
op=c(90/90,80/90,70/90,60/90,50/90,40/90,30/90,10/90))
FV022curve <- data.frame(cv=c(2070,1416,805,459,284,172,98,44,6),
op=c(90/90,80/90,70/90,60/90,50/90,40/90,30/90,20/90,10/90))
g <- ggplot(FV022curve,aes(x=op,y=cv))+geom_point()
plt(g)
plot(g)
fit <- lm(cv ~ op, data=FV022curve)
summary(fit)
fit <- lm(cv ~ 0 + op, data=FV022curve)
summary(fit)
fit <- lm(cv ~ 0 + op^2, data=FV022curve)
summary(fit)
fit$res
plot(fit$res)
fit <- lm(log(cv) ~ op, data=FV022curve)
summary(fit)
plot(fit$res)
f <- function(x){exp(2.1591+5.8473*x)}
g <- ggplot(FV022curve,aes(x=op,y=cv))+geom_point()
g+stat_function(fun=f)
fit <- lm(cv ~ 0 + op^3, data=FV022curve)
summary(fit)
fit$res
plot(fit$res)
g <- ggplot(FV022curve,aes(x=op,y=cv))+geom_point()
plot(g)
help(nls)
p1=1
p1=1
p2=1
fit <- nls(cv ~ p1*op^2*exp(p2*op), data=FV022curve, start=list(p1=p1,p2=p2))
fit <- nls(cv ~ p1*2070*op^2*exp(p2*op), data=FV022curve, start=list(p1=p1,p2=p2))
summary(fit)
fit$coef
fit$coefficients
str(fit)
coef(fit)
pk <- coef(fit)
f <- function(x){pk[1]*2070*x^2*exp(pk[2]*x)}
g+stat_function(fun=f)
install.packages("slidify")
install.packages("ggplot2")
install.packages("devtools")
library("devtools", lib.loc="~/R/win-library/3.1")
find_rtools()
install.packages("KernSmooth")
library("KernSmooth", lib.loc="~/R/win-library/3.1")
library(swirl)
rm(list=ls())
ls()
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z, 555, z)
z*2+100
mw_sqrt<-sqrt(z-1)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
bye()
exit()
quit()
getwd()
swirl()
?load
?load.package
library("swirl", lib.loc="~/R/win-library/3.1")
rm(list=ls())
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(alng.with=my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect>=6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name <- c(my_char, "Marcelo")
my_name
paste(my_name,collapse=" ")
paste("Hello"."world!",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep=".")
play()
paste(c(1,2),c(3,4),sep="-")
paste(c(1,2),c(3,4),c(5,6),sep="-")
paste(c(1,2,3,4,5),sep="-")
paste(c("1","2","3","4","5"),sep="-")
teste <- c("1","2","3","4","5")
paste(teste,sep="-")
paste(teste,sep=".")
paste(teste,collapse=".")
paste(c(1,2),c(3,4),c(5,6),collapse="-")
nxt()
paste(LETTERS,1:4,sep=".")
paste(LETTERS,1:4,sep="-")
swirl
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(my_vector, nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
unique_vals <- sapply(flags,unique)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
bye()
swirl()
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,prob=c(0.3,0.7))
flips <- sample(c(0,1),100,prob=c(0.3,0.7),replace=TRUE)
flips
sum(flips)
bye()
swirl()
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,lambda=10)
replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hust(cm)
hist(cm)
swirl()
d1 <- sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
play()
t3 <- "Outubro 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
nxt()
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
dt <- seq(from=as.POSIXlt("2014-01-01"),to=Sys.time(),length.out=100)
summary(dt)
str(dt)
df <- data.frame(date=dt,value=1:100)
str(df)
library(scales)
g <- ggplot(df,aes(x=date,y=value))+geom_line()
library(ggplot2)
g <- ggplot(df,aes(x=date,y=value))+geom_line()
plot(g)
g <- ggplot(df,aes(x=date,y=value))+geom_line()+scale_x_datetime(labels=date_format("%d/%m/%y") )
plot(g)
g <- ggplot(df,aes(x=date,y=value))+geom_line()+scale_x_datetime(labels=date_format("%d/%m/%y"),breaks=date_breaks("45 days") )
plot(g)
g <- ggplot(df,aes(x=date,y=value))+geom_line()+scale_x_datetime(labels=date_format("%d/%m/%y") )+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
plot(g)
g <- ggplot(df,aes(x=date,y=value))+geom_line()+scale_x_datetime(labels=date_format("%d/%m/%y") )+ theme(axis.text.x = element_text(angle = 90, hjust = 0.5))
plot(g)
g <- ggplot(df,aes(x=date,y=value))+geom_line()+scale_x_datetime(labels=date_format("%d/%m/%y") )+ theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))
plot(g)
g <- ggplot(df,aes(x=date,y=value))+geom_line()+scale_x_datetime(labels=date_format("%b/%y") )+ theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))
plot(g)
add2 <- function(x, y){
x + y
}
add2(1,2)
exit
quit
setwd("~/ENFileVault/R10015/ProgrammingAssignment2/ProgrammingAssignment2")
source('~/ENFileVault/R10015/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
a <- matrix(c(1,2,3,4), nrow=2, ncol=2)
a
solve(a)
b <- makeCacheMatrix(a)
b
str(b)
cacheSolve(b)
source('~/ENFileVault/R10015/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(b)
cacheSolve(b)
cacheSolve(b)
a <- matrix(1:100,nrow=10, ncol=10)
solve(a)
a <- matrix(0:99,nrow=10, ncol=10)
solve(a)
a[2,2] <- 120
solve(a)
a <- matrix(c(1,2,3,4), nrow=2, ncol=2)
cacheSolve(a)
cacheSolve(makeCacheMatrix(a))
b <- makeCacheMatrix(a)
b$get
b$getinv
b$getinv()
cacheSolve(b)
b$getinv()
b$getinv()
